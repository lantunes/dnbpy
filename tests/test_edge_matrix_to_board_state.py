import unittest

import dnbpy


class TestEdgeMatrixToBoardState(unittest.TestCase):

    def test_convert_edge_matrix_to_board_state_3x3(self):
        game = dnbpy.Game((3, 3), ['player1', 'player2'])
        self.assertEqual(game.convert_edge_matrix_to_board_state([[1, 0, 1, 0, 1, 0, 1],
                                                                  [0, 0, 0, 0, 0, 0, 0],
                                                                  [1, 0, 1, 0, 1, 0, 1],
                                                                  [0, 0, 0, 0, 0, 0, 0],
                                                                  [1, 0, 1, 0, 1, 0, 1],
                                                                  [0, 0, 0, 0, 0, 0, 0],
                                                                  [1, 0, 1, 0, 1, 0, 1]]), [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                                                                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
        self.assertEqual(game.convert_edge_matrix_to_board_state([[1, 1, 1, 0, 1, 0, 1],
                                                                  [0, 0, 0, 0, 0, 0, 0],
                                                                  [1, 0, 1, 0, 1, 0, 1],
                                                                  [0, 0, 0, 0, 0, 0, 0],
                                                                  [1, 0, 1, 0, 1, 0, 1],
                                                                  [0, 0, 0, 0, 0, 0, 0],
                                                                  [1, 0, 1, 0, 1, 0, 1]]), [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                                                                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
        self.assertEqual(game.convert_edge_matrix_to_board_state([[1, 1, 1, 1, 1, 0, 1],
                                                                  [0, 0, 0, 0, 0, 0, 0],
                                                                  [1, 0, 1, 0, 1, 0, 1],
                                                                  [0, 0, 0, 0, 0, 0, 0],
                                                                  [1, 0, 1, 0, 1, 0, 1],
                                                                  [0, 0, 0, 0, 0, 0, 0],
                                                                  [1, 0, 1, 0, 1, 0, 1]]), [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                                                                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
        self.assertEqual(game.convert_edge_matrix_to_board_state([[1, 1, 1, 1, 1, 0, 1],
                                                                  [0, 0, 1, 0, 0, 0, 0],
                                                                  [1, 0, 1, 0, 1, 0, 1],
                                                                  [0, 0, 0, 0, 0, 0, 0],
                                                                  [1, 0, 1, 0, 1, 0, 1],
                                                                  [0, 0, 0, 0, 0, 0, 0],
                                                                  [1, 0, 1, 0, 1, 0, 1]]), [1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
                                                                                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
        self.assertEqual(game.convert_edge_matrix_to_board_state([[1, 1, 1, 1, 1, 0, 1],
                                                                  [1, 0, 1, 0, 0, 0, 0],
                                                                  [1, 0, 1, 0, 1, 0, 1],
                                                                  [0, 0, 0, 0, 0, 0, 0],
                                                                  [1, 0, 1, 0, 1, 0, 1],
                                                                  [0, 0, 0, 0, 0, 0, 0],
                                                                  [1, 0, 1, 0, 1, 0, 1]]), [1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0,
                                                                                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
        self.assertEqual(game.convert_edge_matrix_to_board_state([[1, 1, 1, 1, 1, 0, 1],
                                                                  [1, 0, 1, 0, 0, 0, 0],
                                                                  [1, 1, 1, 0, 1, 0, 1],
                                                                  [0, 0, 0, 0, 0, 0, 0],
                                                                  [1, 0, 1, 0, 1, 0, 1],
                                                                  [0, 0, 0, 0, 0, 0, 0],
                                                                  [1, 0, 1, 0, 1, 0, 1]]), [1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0,
                                                                                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
        self.assertEqual(game.convert_edge_matrix_to_board_state([[1, 1, 1, 1, 1, 0, 1],
                                                                  [1, 0, 1, 0, 0, 0, 0],
                                                                  [1, 1, 1, 0, 1, 0, 1],
                                                                  [0, 0, 0, 0, 0, 0, 0],
                                                                  [1, 0, 1, 0, 1, 0, 1],
                                                                  [0, 0, 0, 0, 0, 0, 0],
                                                                  [1, 0, 1, 0, 1, 1, 1]]), [1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0,
                                                                                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1])
        self.assertEqual(game.convert_edge_matrix_to_board_state([[1, 1, 1, 1, 1, 0, 1],
                                                                  [1, 0, 1, 0, 0, 0, 0],
                                                                  [1, 1, 1, 0, 1, 0, 1],
                                                                  [0, 0, 0, 0, 0, 0, 0],
                                                                  [1, 0, 1, 0, 1, 0, 1],
                                                                  [0, 0, 0, 0, 0, 0, 1],
                                                                  [1, 0, 1, 0, 1, 1, 1]]), [1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0,
                                                                                            0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1])
        self.assertEqual(game.convert_edge_matrix_to_board_state([[1, 1, 1, 1, 1, 0, 1],
                                                                  [1, 0, 1, 0, 0, 0, 0],
                                                                  [1, 1, 1, 0, 1, 0, 1],
                                                                  [0, 0, 0, 0, 0, 0, 0],
                                                                  [1, 0, 1, 0, 1, 0, 1],
                                                                  [0, 0, 0, 0, 1, 0, 1],
                                                                  [1, 0, 1, 0, 1, 1, 1]]), [1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0,
                                                                                            0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1])
        self.assertEqual(game.convert_edge_matrix_to_board_state([[1, 1, 1, 1, 1, 0, 1],
                                                                  [1, 0, 1, 0, 0, 0, 0],
                                                                  [1, 1, 1, 0, 1, 0, 1],
                                                                  [0, 0, 0, 0, 0, 0, 0],
                                                                  [1, 0, 1, 0, 1, 1, 1],
                                                                  [0, 0, 0, 0, 1, 0, 1],
                                                                  [1, 0, 1, 0, 1, 1, 1]]), [1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0,
                                                                                            0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1])
        self.assertEqual(game.convert_edge_matrix_to_board_state([[1, 1, 1, 1, 1, 0, 1],
                                                                  [1, 0, 1, 0, 0, 0, 0],
                                                                  [1, 1, 1, 1, 1, 0, 1],
                                                                  [0, 0, 0, 0, 0, 0, 0],
                                                                  [1, 0, 1, 0, 1, 1, 1],
                                                                  [0, 0, 0, 0, 1, 0, 1],
                                                                  [1, 0, 1, 0, 1, 1, 1]]), [1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0,
                                                                                            0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1])
        self.assertEqual(game.convert_edge_matrix_to_board_state([[1, 1, 1, 1, 1, 0, 1],
                                                                  [1, 0, 1, 0, 0, 0, 0],
                                                                  [1, 1, 1, 1, 1, 0, 1],
                                                                  [0, 0, 1, 0, 0, 0, 0],
                                                                  [1, 0, 1, 0, 1, 1, 1],
                                                                  [0, 0, 0, 0, 1, 0, 1],
                                                                  [1, 0, 1, 0, 1, 1, 1]]), [1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1,
                                                                                            0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1])
        self.assertEqual(game.convert_edge_matrix_to_board_state([[1, 1, 1, 1, 1, 0, 1],
                                                                  [1, 0, 1, 0, 1, 0, 0],
                                                                  [1, 1, 1, 1, 1, 0, 1],
                                                                  [0, 0, 1, 0, 0, 0, 0],
                                                                  [1, 0, 1, 0, 1, 1, 1],
                                                                  [0, 0, 0, 0, 1, 0, 1],
                                                                  [1, 0, 1, 0, 1, 1, 1]]), [1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1,
                                                                                            0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1])
